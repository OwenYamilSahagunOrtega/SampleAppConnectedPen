/*
 * Copyright (c) 2020 Dexcom, Inc.
 * Licenses to third-party material that may be incorporated into this software are listed at www.dexcom.com/notices
 */
apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply from: '../gradle/dokka.gradle'

if (isDexcomQualityEnabled()) {
    logger.log(LogLevel.DEBUG, "Initializing Dexcom quality plugin")
    apply from: '../gradle/quality.gradle'
}

android {
    buildFeatures {
        dataBinding = true
        viewBinding = true
    }

    compileSdkVersion versions.compileSDK

    defaultConfig {
        applicationId "com.dexcom.democonnectedpen"
        targetSdkVersion versions.targetSDK
        minSdkVersion versions.minSDK
        versionCode 1
        versionName "1.0"
        multiDexEnabled true
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
        debug {
            testCoverageEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = JavaVersion.VERSION_1_8.toString()
        freeCompilerArgs += "-Xopt-in=kotlin.RequiresOptIn"
        freeCompilerArgs += "-Xopt-in=kotlin.ExperimentalUnsignedTypes"
        freeCompilerArgs += "-Xopt-in=kotlinx.coroutines.ExperimentalCoroutinesApi"
        freeCompilerArgs += "-Xopt-in=kotlinx.coroutines.InternalCoroutinesApi"
        freeCompilerArgs += "-Xopt-in=kotlinx.coroutines.FlowPreview"
        freeCompilerArgs += "-Xopt-in=kotlinx.serialization.ExperimentalSerializationApi"
        freeCompilerArgs += "-XXLanguage:-ProhibitInvisibleAbstractMethodsInSuperclasses"
    }
}

dependencies {
    implementation "androidx.core:core-ktx:$versions.coreKtx"
    implementation "androidx.appcompat:appcompat:$versions.appcompat"
    implementation "androidx.constraintlayout:constraintlayout:$versions.constraint"
    implementation 'androidx.lifecycle:lifecycle-livedata-core-ktx:2.3.0-rc01'
    implementation 'androidx.lifecycle:lifecycle-viewmodel-ktx:2.3.0-rc01'
    implementation "androidx.lifecycle:lifecycle-extensions:2.2.0"
    implementation("androidx.navigation:navigation-fragment-ktx:$versions.nav_version")
    implementation("androidx.navigation:navigation-ui-ktx:$versions.nav_version")
    implementation "com.google.android.material:material:$versions.material"
    implementation "com.google.code.gson:gson:${versions.gson}"

    implementation "org.koin:koin-android:$versions.koin"
    implementation "org.koin:koin-androidx-scope:$versions.koin"
    implementation "org.koin:koin-androidx-viewmodel:$versions.koin"

    //implementation partner lib
    //implementation "com.dexcom.insulinpen-sdk:android-insulinpen-sdk:beta-0.0.1.11"
//[119, 73, 104, 105, 118, 83, 55, 117, 74, 110, 86, 57, 98, 121, 72, 103, 98, 113, 114, 103, 50, 103, 61, 61]}
    implementation "com.dexcom.connectedpens:eli-lilly-transmitter:4.2.0@aar"
    implementation "com.dexcom.connectedpens:eli-lilly:3.0.1@aar"
    implementation "com.dexcom.connectedpens:dialoqsdk:4.0.0-18@aar"

    // insulintransmitter dependencies
    implementation 'com.polidea.rxandroidble2:rxandroidble:1.11.0'
    implementation 'io.reactivex.rxjava2:rxjava:2.2.17'
    implementation 'io.reactivex.rxjava2:rxandroid:2.1.1'
    implementation 'com.google.dagger:dagger:2.28.3'
    implementation project(path: ':android-insulinpen')
}

/**
 * Determine whether to run the Dexcom Quality Plugin or not
 * As of this writing, this plugin's sole job is to run Jacoco code coverage reporting
 *
 * To enable Jacoco for a local build, add -Pcode_coverage=true to the associated gradle command
 * e.g. ./gradlew build -Pcode_coverage=true
 *
 * To disable Jacoco for a CI build, use -Pcode_coverage=false
 *
 * @return boolean: whether the Dexcom Quality Plugin should be run for this build
 *      * Always respects flag if passed
 *      * Default values for null flag:
 *          * Local build - false
 *          * CI build - true
 */
boolean isDexcomQualityEnabled() {
    String flag = project.properties["code_coverage"]?.toLowerCase()
    if (flag) {
        return Boolean.valueOf(flag)
    }
    return System.env["CI"] == "true"
}
